name: CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'scripts/**'
      - '.github/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'requirements*.in'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'scripts/**'
      - '.github/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'requirements*.in'
  workflow_dispatch:
    inputs:
      run-redteam:
        description: 'Run optional red team suite'
        required: false
        default: 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.repository }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read
# Additional step-level permissions are declared below for actions
# that require more than read-only access (e.g., caching or
# uploading artifacts). Update these comments if new steps need
# other scopes.

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      code_changed: ${{ steps.diff.outputs.CODE_CHANGES }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect non-comment code changes
        id: diff
        run: bash scripts/check_code_changes.sh
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    needs: changes
    if: needs.changes.outputs.code_changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load environment variables
        if: hashFiles('.env') != ''
        shell: bash
        run: |
          while read -r line; do
            if [[ $line =~ ^[A-Za-z_][A-Za-z0-9_]*= ]]; then
              echo "$line" >> "$GITHUB_ENV"
            fi
          done < .env

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        # actions/cache needs write permission to create caches
        permissions:
          actions: write
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

      - name: Check locked requirements (prod and dev)
        shell: bash
        run: bash scripts/check_requirements.sh

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install --extra-index-url https://download.pytorch.org/whl/cu121 torch==2.3.0+cu121
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      # Cache pre-commit environment for faster runs

      - name: Cache pre-commit
        # actions/cache needs write permission to create caches
        permissions:
          actions: write
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-precommit-

      - name: Run pre-commit
        shell: bash
        run: pre-commit run --all-files

      - name: Run Ruff (Lint)
        shell: bash
        run: ruff check . --output-format=full

      - name: Run Ruff Format (Formatter)
        shell: bash
        run: ruff format --check .

      - name: Run Mypy (Type Check)
        shell: bash
        run: mypy src/ --strict

      - name: Run Tests & Coverage
        shell: bash
        run: |
          pytest -q -n auto --durations=10 --maxfail=1 --disable-warnings --cov=src --cov-report=xml --cov-fail-under=90

      - name: Run Integration Tests
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: pytest -m "integration" --disable-warnings -q

      - name: Run Windows Path/Discord Integration
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          pytest \
            tests/integration/test_hierarchical_memory_persistence.py \
            tests/integration/interfaces/test_discord_bot.py \
            -m "integration" --disable-warnings -q

      - name: Upload coverage artifact
        # upload-artifact requires write permission
        permissions:
          actions: write
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: coverage.xml

      - name: Run Black (Formatter)
        shell: bash
        run: black --check .

  full-suite:
    needs: changes
    if: github.ref == 'refs/heads/main' && needs.changes.outputs.code_changed == 'true'
    runs-on: ["self-hosted", "linux"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load environment variables
        if: hashFiles('.env') != ''
        shell: bash
        run: |
          while read -r line; do
            if [[ $line =~ ^[A-Za-z_][A-Za-z0-9_]*= ]]; then
              echo "$line" >> "$GITHUB_ENV"
            fi
          done < .env
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        # actions/cache needs write permission to create caches
        permissions:
          actions: write
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Check locked requirements (prod and dev)
        shell: bash
        run: bash scripts/check_requirements.sh

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install --extra-index-url https://download.pytorch.org/whl/cu121 torch==2.3.0+cu121
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Full Test Suite
        shell: bash
        run: pytest -m "slow or dspy or integration" --disable-warnings -q

  redteam:
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.run-redteam == 'true') ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-redteam'))
    runs-on: ["self-hosted", "linux"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load environment variables
        if: hashFiles('.env') != ''
        shell: bash
        run: |
          while read -r line; do
            if [[ $line =~ ^[A-Za-z_][A-Za-z0-9_]*= ]]; then
              echo "$line" >> "$GITHUB_ENV"
            fi
          done < .env

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Check locked requirements (prod and dev)
        shell: bash
        run: bash scripts/check_requirements.sh

      - name: Install dependencies
        env:
          PIP_DEFAULT_TIMEOUT: '120'
        run: |
          python -m pip install --upgrade pip
          pip install --extra-index-url https://download.pytorch.org/whl/cu121 torch==2.3.0+cu121
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install garak

      - name: Run Red Team Suite
        shell: bash
        run: |
          set -o pipefail
          pytest tests/redteam -m redteam --disable-warnings -q | tee redteam.log

      - name: Fail on prompt leaks
        shell: bash
        run: |
          if grep -i "leak" redteam.log; then
            echo "Prompt leak detected" >&2
            exit 1
          fi
