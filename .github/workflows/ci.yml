name: CI

on:
  push:
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect non-comment code changes
        id: changes
        shell: bash
        run: |
          bash scripts/check_code_changes.sh

      - name: Skip workflow if only docs or comments changed
        if: steps.changes.outputs.CODE_CHANGES == 'false'
        run: |
          echo "No non-comment code changes detected. Skipping remaining steps."
          exit 0

      - name: Set up Python
        if: steps.changes.outputs.CODE_CHANGES == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        if: steps.changes.outputs.CODE_CHANGES == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        if: steps.changes.outputs.CODE_CHANGES == 'true'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      # Cache pre-commit environment for faster runs

      - name: Cache pre-commit
        if: steps.changes.outputs.CODE_CHANGES == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-precommit-

      - name: Run pre-commit
        if: steps.changes.outputs.CODE_CHANGES == 'true'
        shell: bash
        run: pre-commit run --all-files

      - name: Run Ruff (Lint)
        if: steps.changes.outputs.CODE_CHANGES == 'true'
        shell: bash
        run: ruff check . --output-format=full

      - name: Run Mypy (Type Check)
        if: steps.changes.outputs.CODE_CHANGES == 'true'
        shell: bash
        run: mypy src/ --strict

      - name: Run Tests & Coverage
        if: steps.changes.outputs.CODE_CHANGES == 'true'
        shell: bash
        run: |
          pytest --maxfail=1 --disable-warnings -q --cov=src --cov-report=xml --cov-fail-under=90

      - name: Run Integration Tests
        if: steps.changes.outputs.CODE_CHANGES == 'true' && matrix.os == 'ubuntu-latest'
        shell: bash
        run: pytest -m "integration" --disable-warnings -q

      - name: Upload coverage artifact
        if: steps.changes.outputs.CODE_CHANGES == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: coverage.xml
          path: coverage.xml

      - name: Run Black (Formatter)
        if: steps.changes.outputs.CODE_CHANGES == 'true'
        shell: bash
        run: black --check .

  full-suite:
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect non-comment code changes
        if: github.event_name != 'schedule'
        id: changes
        shell: bash
        run: |
          bash scripts/check_code_changes.sh

      - name: Skip workflow if only docs or comments changed
        if: github.event_name != 'schedule' && steps.changes.outputs.CODE_CHANGES == 'false'
        run: |
          echo "No non-comment code changes detected. Skipping remaining steps."
          exit 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Full Test Suite
        shell: bash
        run: pytest -m "slow or dspy or integration" --disable-warnings -q
