[pytest]
# Ignore specific deprecation warnings that come from third-party dependencies
filterwarnings =
    # Ignore the audioop deprecation warning from discord.py
    ignore:'audioop' is deprecated and slated for removal in Python 3.13:DeprecationWarning
    # Ignore importlib-resources open_text deprecation warning
    ignore:open_text is deprecated.*:DeprecationWarning
    # Ignore unclosed socket resource warnings
    ignore::ResourceWarning

# Parallelization and test selection
addopts =
    -ra
    --import-mode=importlib
    -n auto --color=yes -p no:cacheprovider
    -m "unit and not dspy"

# Register test markers for categorization
# Default run (pytest): runs only unit tests (no slow, dspy, or integration)
# Full run (pytest -m "slow or dspy or integration"): runs all slow/integration/DSPy tests
markers =
    unit: marks tests as unit tests (fast, isolated, no external services)
    integration: marks tests as integration tests (inter-component, may involve controlled external services or mocks)
    slow: marks tests as particularly slow-running (typically >10-15 seconds, use judgment)
    dspy: marks tests that specifically involve DSPy programs or LLM interactions (even if mocked)
    memory: marks tests primarily focusing on memory systems (e.g., ChromaDB operations, RAG, summarization logic)
    critical_path: marks tests covering essential, core functionality that should always pass quickly
    agent_graph: marks tests involving the BasicAgentGraph and its nodes
    simulation: marks tests involving the main Simulation loop or environment
    critical: marks tests covering the most critical functionalities
    fast: marks tests that are very quick (e.g., smoke tests)
    vector_store: marks tests related to vector store functionality
    hierarchical_memory: marks tests for hierarchical memory systems
    mus: marks tests related to Memory Utility Score (MUS)
    core: marks tests related to core agent functionality
    longevity: marks tests as longevity tests (can be slow)
    redteam: marks optional jailbreak-scanning tests that require garak
    require_ollama: marks tests that require a running Ollama server
    stress: marks large-scale stress tests

log_level = DEBUG 

# Log format
log_format = %(asctime)s - %(name)s - %(levelname)s - %(message)s
log_date_format = %Y-%m-%d %H:%M:%S

# Filter out specific warnings by category and message (regex)
# filterwarnings =
#     ignore::UserWarning
#     ignore:DeprecationWarning:.*pydantic.*:

# Test paths
testpaths =
    tests

# Python files pattern
python_files = test_*.py

# Python classes pattern
python_classes = Test*

# Python functions pattern
python_functions = test_*

# Asyncio settings for pytest-asyncio
# Options for asyncio_mode: strict, legacy
asyncio_mode = strict
